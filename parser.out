Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> line
Rule 2     program -> line NEW_LINE program
Rule 3     line -> plus
Rule 4     line -> minus
Rule 5     plus -> NUMBER + NUMBER
Rule 6     minus -> NUMBER - NUMBER

Terminals, with rules where they appear

+                    : 5
-                    : 6
NEW_LINE             : 2
NUMBER               : 5 5 6 6
error                : 

Nonterminals, with rules where they appear

line                 : 1 2
minus                : 4
plus                 : 3
program              : 2 0

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . line
    (2) program -> . line NEW_LINE program
    (3) line -> . plus
    (4) line -> . minus
    (5) plus -> . NUMBER + NUMBER
    (6) minus -> . NUMBER - NUMBER

    NUMBER          shift and go to state 5

    program                        shift and go to state 1
    line                           shift and go to state 2
    plus                           shift and go to state 3
    minus                          shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> line .
    (2) program -> line . NEW_LINE program

    $end            reduce using rule 1 (program -> line .)
    NEW_LINE        shift and go to state 6


state 3

    (3) line -> plus .

    NEW_LINE        reduce using rule 3 (line -> plus .)
    $end            reduce using rule 3 (line -> plus .)


state 4

    (4) line -> minus .

    NEW_LINE        reduce using rule 4 (line -> minus .)
    $end            reduce using rule 4 (line -> minus .)


state 5

    (5) plus -> NUMBER . + NUMBER
    (6) minus -> NUMBER . - NUMBER

    +               shift and go to state 7
    -               shift and go to state 8


state 6

    (2) program -> line NEW_LINE . program
    (1) program -> . line
    (2) program -> . line NEW_LINE program
    (3) line -> . plus
    (4) line -> . minus
    (5) plus -> . NUMBER + NUMBER
    (6) minus -> . NUMBER - NUMBER

    NUMBER          shift and go to state 5

    line                           shift and go to state 2
    program                        shift and go to state 9
    plus                           shift and go to state 3
    minus                          shift and go to state 4

state 7

    (5) plus -> NUMBER + . NUMBER

    NUMBER          shift and go to state 10


state 8

    (6) minus -> NUMBER - . NUMBER

    NUMBER          shift and go to state 11


state 9

    (2) program -> line NEW_LINE program .

    $end            reduce using rule 2 (program -> line NEW_LINE program .)


state 10

    (5) plus -> NUMBER + NUMBER .

    NEW_LINE        reduce using rule 5 (plus -> NUMBER + NUMBER .)
    $end            reduce using rule 5 (plus -> NUMBER + NUMBER .)


state 11

    (6) minus -> NUMBER - NUMBER .

    NEW_LINE        reduce using rule 6 (minus -> NUMBER - NUMBER .)
    $end            reduce using rule 6 (minus -> NUMBER - NUMBER .)

